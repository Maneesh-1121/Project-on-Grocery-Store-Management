CREATE DATABASE GROCERY_STORE;

USE GROCERY_STORE;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
SELECT * FROM SUPPLIER;


-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);
SELECT * FROM CATEGORIES;

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);
SELECT * FROM EMPLOYEES;



-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);
SELECT * FROM CUSTOMERS;

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        );
SELECT * FROM PRODUCTS;

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
SELECT * FROM ORDERS;


-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
SELECT * FROM ORDER_DETAILS;

SHOW TABLES IN GROCERY_STORE;

# Analysis Questions
-- Customer Insights

-- How many unique customers have placed orders?

SELECT COUNT(DISTINCT cust_ID) AS UniqueCustomers
FROM orders;

-- Which customers have placed the highest number of orders?

SELECT Cust_ID, COUNT(Ord_ID) AS OrderCount
FROM Orders
GROUP BY Cust_ID
ORDER BY OrderCount DESC;

-- What is the total and average purchase value per customer?

SELECT c.cust_ID,
     SUM(o.each_price * o.quantity) as TotalAverage,
     AVG(o.each_price * o.quantity) as AveragePurchase
FROM Orders c
JOIN Order_details o ON c.cust_ID = o.ord_ID
GROUP BY c.cust_ID;

-- 	Who are the top 5 customers by total purchase amount?

SELECT o.cust_ID,
       SUM(od.each_price * od.Quantity) AS TotalPurchase
FROM Orders o
JOIN Order_Details od ON o.Ord_ID = od.Ord_ID
GROUP BY o.cust_ID
ORDER BY TotalPurchase DESC
LIMIT 5;

# 2. Product Performance

-- How many products exist in each category?

SELECT Cat_ID, COUNT(Prod_ID) AS ProductCount
FROM Products
GROUP BY Cat_ID;

-- What is the average price of products by category?

SELECT Cat_ID, AVG(Price) AS AvgPrice
FROM Products
GROUP BY Cat_ID;

-- 	Which products have the highest total sales volume (by quantity)?

SELECT Prod_ID, SUM(Quantity) AS TotalQuantity
FROM Order_Details
GROUP BY Prod_ID
ORDER BY TotalQuantity DESC;

-- 	What is the total revenue generated by each product?

SELECT Prod_ID, SUM(each_price * Quantity) AS Revenue
FROM Order_Details
GROUP BY Prod_ID
ORDER BY Revenue DESC;

-- How do product sales vary by category and supplier?

SELECT
    c.cat_name,
    s.sup_name,
    SUM(od.quantity) AS total_quantity_sold,
    SUM(od.each_price) AS total_sales_amount
FROM
    order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY
    c.cat_name,
    s.sup_name
ORDER BY
    c.cat_name,
    s.sup_name;

# 3. . Sales and Order Trends

-- How many orders have been placed in total?

SELECT COUNT(Ord_ID) AS TotalOrders
FROM Orders;

-- 	What is the average value per order?

SELECT AVG(Ord_ID) AS Avg_Value_per_Order
FROM (
  SELECT o.Ord_ID, SUM(od.each_price * od.Quantity) AS OrderTotal
  FROM Orders o
  JOIN Order_Details od ON o.Ord_ID = od.Ord_ID
  GROUP BY o.Ord_ID
) t;

-- 	On which dates were the most orders placed?

SELECT Order_Date, COUNT(Ord_ID) AS OrderCount
FROM Orders
GROUP BY Order_Date
ORDER BY OrderCount DESC;

-- 	What are the monthly trends in order volume and revenue?

SELECT YEAR(Order_Date) AS Year, MONTH(Order_Date) AS Month,
       COUNT(o.Ord_ID) AS OrderCount,
       SUM(od.each_Price * od.Quantity) AS Revenue
FROM Orders o
JOIN Order_Details od ON o.Ord_ID = od.Ord_ID
GROUP BY YEAR(Order_Date), MONTH(Order_Date)
ORDER BY Year, Month ;


# Supplier Contribution

-- How many suppliers are there in the database?

SELECT COUNT(DISTINCT Sup_ID) AS SupplierCount
FROM Supplier;

-- 	Which supplier provides the most products?

SELECT Sup_ID, COUNT(Prod_ID) AS ProductCount
FROM Products
GROUP BY Sup_ID
ORDER BY ProductCount DESC;

-- What is the average price of products from each supplier?

SELECT Sup_ID, AVG(Price) AS AvgPrice
FROM Products
GROUP BY Sup_ID;

-- 	Which suppliers contribute the most to total product sales (by revenue)?

SELECT p.Sup_ID, SUM(od.each_price * od.Quantity) AS Revenue
FROM Order_Details od
JOIN Products p ON od.Prod_ID = p.Prod_ID
GROUP BY p.Sup_ID
ORDER BY  Revenue DESC;

# Employee Performance

-- How many employees have processed orders?

SELECT COUNT(DISTINCT Emp_ID) as EmployeeCount
FROM ORDERS;

-- Which employees have handled the most orders?

SELECT Emp_ID, COUNT(Ord_ID) AS OrderCount
FROM Orders
GROUP BY Emp_ID
ORDER BY OrderCount DESC;


-- What is the total sales value processed by each employee?

SELECT o.Emp_ID, SUM(od.each_price * od.Quantity) AS TotalSales
FROM Orders o
JOIN Order_Details od ON o.Ord_ID = od.Ord_ID
GROUP BY o.Emp_ID
ORDER BY TotalSales DESC;

-- What is the average order value handled per employee?

SELECT emp_ID, AVG(OrderValue) AS AvgOrderValue
FROM (
  SELECT o.Ord_ID, o.emp_ID, SUM(od.each_price * od.Quantity) AS OrderValue
  FROM Orders o
  JOIN Order_Details od ON o.Ord_ID = od.Ord_ID
  GROUP BY o.Ord_ID, o.emp_ID
) t
GROUP BY emp_ID;

# Order Details Deep Dive

-- What is the relationship between quantity ordered and total price?

SELECT
    od.quantity,
    SUM(od.quantity * od.each_price) AS total_price
FROM
    order_details od
GROUP BY
    od.quantity
ORDER BY
    od.quantity;

-- What is the average quantity ordered per product?

SELECT
    prod_id,
    AVG(quantity) AS Average_quantity_ordered
FROM
    order_details
GROUP BY
    prod_id
ORDER BY
    Average_quantity_ordered DESC;


-- How does the unit price vary across products and orders?

SELECT
    p.prod_name,
    od.ord_id,
    od.each_price
FROM
    order_details od
JOIN
    products p ON od.prod_id = p.prod_id
ORDER BY
    p.prod_name,
    od.ord_id;

